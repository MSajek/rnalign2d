import pytest
from rnalign2d.refinement import structure_to_representation, \
    structure_conservation, find_structural_blocks, \
    calculate_unusual_positions_places, move_structures, fix_one_place,\
    move_1_2nt_gaps, remove_gaps_same_place, move_gaps_to_the_loop_centre


@pytest.mark.parametrize("structure,representation", [
    ('((..))', {0:5, 1: 4, 4:1, 5: 0}),
    ('((.[.((.].))..))',
     {0: 15, 1: 14, 3: 8, 5: 11, 6: 10, 8: 3, 10: 6, 11: 5, 14: 1, 15: 0})])
def test_structure_to_representation(structure, representation):
    result = structure_to_representation(structure)
    assert result == representation


@pytest.mark.parametrize("structures,score", [
    ([], 0),
    (['(((', '(((', '((('], [9, 9, 9]),
    (['(((', '(((', '((.'], [9, 9, 5])])
def test_structure_conservation(structures, score):
    result = structure_conservation(structures)
    assert result == score


@pytest.mark.parametrize("dotbracket_structure,representation,result_blocks", [
    ('((.[.((.].))..))',
     {0: 15, 1: 14, 3: 8, 5: 11, 6: 10, 8: 3, 10: 6, 11: 5, 14: 1, 15: 0},
     [(0, 1), (3, 3), (5, 6), (8, 8), (10, 11), (14, 15)]),
    ('((.[.((.].))..)).',
     {0: 15, 1: 14, 3: 8, 5: 11, 6: 10, 8: 3, 10: 6, 11: 5, 14: 1, 15: 0},
     [(0, 1), (3, 3), (5, 6), (8, 8), (10, 11), (14, 15)]),
    ('((-[.((-].))--))',
     {0: 15, 1: 14, 3: 8, 5: 11, 6: 10, 8: 3, 10: 6, 11: 5, 14: 1, 15: 0},
     [(0, 1), (3, 3), (5, 6), (8, 8), (10, 11), (14, 15)]),
    ('(.-[.((-].))--.)',
     {0: 15, 3: 8, 5: 11, 6: 10, 8: 3, 10: 6, 11: 5, 15: 0},
     [(0, 0), (3, 3), (5, 6), (8, 8), (10, 11), (15, 15)]),
])
def test_find_structural_blocks(dotbracket_structure, representation, result_blocks):
    result = find_structural_blocks(dotbracket_structure, representation)
    assert result == result_blocks


@pytest.mark.parametrize("representations,structural_blocks,result_positions,"
                         "result_positions_and_shift", [
    # (((-(((..))))))
    # .((((((..))))))
    ([{0: 14, 1: 13, 2: 12, 4: 11, 5: 10, 6: 9, 9: 6, 10: 5, 11: 4, 12: 2,
       13: 1, 14: 0},
      {1: 14, 2: 13, 3: 12, 4: 11, 5: 10, 6: 9, 9: 6, 10: 5, 11: 4, 12: 3,
       13: 2, 14: 1}],
     [[(0, 2), (4, 6), (9, 14)], [(1, 6), (9, 14)]],
     [0, 1, 2], [(0, 1), (1, 1), (2, 1)]),

    ([{1: 14, 2: 13, 3: 12, 4: 11, 5: 10, 6: 9, 9: 6, 10: 5, 11: 4, 12: 3,
       13: 2, 14: 1},
      {0: 14, 1: 13, 2: 12, 4: 11, 5: 10, 6: 9, 9: 6, 10: 5, 11: 4, 12: 2,
       13: 1, 14: 0}],
     [[(1, 6), (9, 14)], [(0, 2), (4, 6), (9, 14)]],
     [0, 1, 2], [(0, 1), (1, 1), (2, 1)]),

    # .(((.))).
    # (((...)))
    ([{1: 7, 2: 6, 3: 5, 5: 3, 6: 2, 7: 1},
      {0: 8, 1: 7, 2: 6, 6: 2, 7: 1, 8: 0}],
     [[(1, 3), (5, 7)], [(0, 2), (6, 8)]],
     [0, 1, 2, 5, 6, 7], [(0, 1), (1, 1), (2, 1), (5, 1), (6, 1), (7, 1)]),

    ([{0: 8, 1: 7, 2: 6, 6: 2, 7: 1, 8: 0},
      {1: 7, 2: 6, 3: 5, 5: 3, 6: 2, 7: 1}],
     [[(0, 2), (6, 8)], [(1, 3), (5, 7)]],
     [0, 1, 2, 5, 6, 7], [(0, 1), (1, 1), (2, 1), (5, 1), (6, 1), (7, 1)]),
    ])
def test_calculate_unusual_positions_places(
        representations, structural_blocks, result_positions,
        result_positions_and_shift):
    result, result_with_shift = calculate_unusual_positions_places(
        representations, structural_blocks)
    assert result == result_positions
    assert result_with_shift == result_positions_and_shift


@pytest.mark.parametrize("dotbracket_structures,start_position,end_position,"
                         "groups,more_left_group,left_or_right,how_many,"
                         "how_many_nt_by_structure,adjusted", [
    # 1 nt, opening brackets
    (['(((-(((..))))))', '.((((((..))))))'],
     0, 2, {0: [0], 1:[1]},
     0, 'left', 1, [1, 0],
     ['-((((((..))))))', '.((((((..))))))']),

    (['(((.(((..))))))', '.((((((..))))))'],
     0, 2, {0: [0], 1: [1]},
     0, 'left', 1, [1, 0],
     ['-(((.(((..))))))', '.(((-(((..))))))']),

    (['(((-(((..))))))', '((((((...))))))'],
     3, 5, {0: [0], 1:[1]},
     1, 'right', 1, [1, 0],
     ['((((((-..))))))', '((((((...))))))']),

    (['(((.(((..))))))', '((((((...))))))'],
     3, 5, {0: [0], 1: [1]},
     1, 'right', 1, [1, 0],
     ['(((.(((-..))))))', '(((-(((...))))))']),

    # 1 nt, closing brackets
    (['((((((..)))-)))', '((((((..)))))).'],
     11, 13, {0: [0], 1: [1]},
     1, 'right', 1, [1, 0],
     ['((((((..))))))-', '((((((..)))))).']),

     (['((((((..))).)))', '((((((..)))))).'],
      11, 13, {0: [0], 1: [1]},
      1, 'right', 1, [1, 0],
      ['((((((..))).)))-', '((((((..)))-))).']),

    (['((((((..)))-)))', '((((((...))))))'],
     8, 10, {0: [0], 1: [1]},
     0, 'left', 1, [1, 0],
     ['((((((..-))))))', '((((((...))))))']),

    (['((((((..))).)))', '((((((...))))))'],
     8, 10, {0: [0], 1: [1]},
     0, 'left', 1, [1, 0],
     ['((((((..-))).)))', '((((((...)))-)))']),

    # 2 nt, opening brackets
    (['(((--(((..))))))', '..((((((..))))))'],
     0, 2, {0: [0], 1: [1]},
     0, 'left', 2, [2, 0],
     ['--((((((..))))))', '..((((((..))))))']),

    (['(((..(((..))))))', '..((((((..))))))'],
     0, 2, {0: [0], 1: [1]},
     0, 'left', 2, [2, 0],
     ['--(((..(((..))))))', '..(((--(((..))))))']),

    (['(((--(((..))))))', '((((((....))))))'],
     3, 5, {0: [0], 1: [1]},
     1, 'right', 2, [2, 0],
     ['((((((--..))))))', '((((((....))))))']),

    (['(((..(((..))))))', '((((((....))))))'],
     3, 5, {0: [0], 1: [1]},
     1, 'right', 2, [2, 0],
     ['(((..(((--..))))))', '(((--(((....))))))']),

    # 2 nt, closing brackets
    (['((((((..)))--)))', '((((((..))))))..'],
     11, 13, {0: [0], 1: [1]},
     1, 'right', 2, [2, 0],
     ['((((((..))))))--', '((((((..))))))..']),

    (['((((((..)))..)))', '((((((..))))))..'],
     11, 13, {0: [0], 1: [1]},
     1, 'right', 2, [2, 0],
     ['((((((..)))..)))--', '((((((..)))--)))..']),

    (['((((((..)))--)))', '((((((....))))))'],
     8, 10, {0: [0], 1: [1]},
     0, 'left', 2, [2, 0],
     ['((((((..--))))))', '((((((....))))))']),

    (['((((((..)))..)))', '((((((....))))))'],
     8, 10, {0: [0], 1: [1]},
     0, 'left', 2, [2, 0],
     ['((((((..--)))..)))', '((((((....)))--)))']),

    # 3 nt separated (if -), opening brackets
    (['(((-.--(((..))))))', '...(((.(((..))))))'],
     0, 2, {0: [0], 1: [1]},
     0, 'left', 3, [3, 0],
     ['---(((.(((..))))))', '...(((.(((..))))))']),

    (['(((...(((..))))))', '...((((((..))))))'],
     0, 2, {0: [0], 1: [1]},
     0, 'left', 3, [3, 0],
     ['---(((...(((..))))))', '...(((---(((..))))))']),

    (['(((--.-(((..))))))', '(((.(((.....))))))'],
     4, 6, {0: [0], 1: [1]},
     1, 'right', 3, [3, 0],
     ['(((.(((---..))))))', '(((.(((.....))))))']),

    (['(((...(((..))))))', '((((((.....))))))'],
     3, 5, {0: [0], 1: [1]},
     1, 'right', 3, [3, 0],
     ['(((...(((---..))))))', '(((---(((.....))))))']),

    # 3 nt separated (if -), closing brackets
    (['((((((..)))--.-)))', '((((((..))).)))...'],
     12, 14, {0: [0], 1: [1]},
     1, 'right', 3, [3, 0],
     ['((((((..))).)))---', '((((((..))).)))...']),

    (['((((((..)))...)))', '((((((..))))))...'],
     11, 13, {0: [0], 1: [1]},
     1, 'right', 3, [3, 0],
     ['((((((..)))...)))---', '((((((..)))---)))...']),

    (['((((((..)))-.--)))', '((((((..-..))).)))'],
     8, 10, {0: [0], 1: [1]},
     0, 'left', 3, [3, 0],
     ['((((((..---))).)))', '((((((..-..))).)))']),

    (['((((((..)))...)))', '((((((..-..))))))'],
     8, 10, {0: [0], 1: [1]},
     0, 'left', 3, [3, 0],
     ['((((((..---)))...)))', '((((((..-..)))---)))']),

    # 3 structures
    (['(((-(((..))))))', '(((-(((..))))))',  '.((((((..))))))'],
     0, 2, {0: [0, 1], 1:[2]},
     0, 'left', 1, [1, 1, 0],
     ['-((((((..))))))', '-((((((..))))))', '.((((((..))))))']),

    (['(((.(((..))))))', '(((.(((..))))))', '.((((((..))))))'],
     0, 2, {0: [0, 1], 1: [2]},
     0, 'left', 1, [1, 1, 0],
     ['-(((.(((..))))))', '-(((.(((..))))))', '.(((-(((..))))))']),
])
def test_move_structures(
        dotbracket_structures, start_position, end_position, groups,
        more_left_group, left_or_right, how_many, how_many_nt_by_structure,
        adjusted):
    result = move_structures(
        dotbracket_structures, start_position, end_position, groups,
        more_left_group, left_or_right, how_many, how_many_nt_by_structure)
    assert result == adjusted


@pytest.mark.parametrize(
    "dotbracket_structures,position,left_or_right,unusual_positions_places,"
    "representations,how_many_nt,adjusted", [

    # 1 nucleotide shift
    (['(((-(((..))))))', '.((((((..))))))'], 0, 'left', [0, 1, 2],
     [{0: 14, 1: 13, 2: 12, 4: 11, 5: 10, 6: 9, 9: 6, 10: 5, 11: 4, 12: 2,
       13: 1, 14: 0},
      {1: 14, 2: 13, 3: 12, 4: 11, 5: 10, 6: 9, 9: 6, 10: 5, 11: 4, 12: 3,
       13: 2, 14: 1}], 1,
     ['-((((((..))))))', '.((((((..))))))']),

    # 2 nucleotides shift
    (['(((--(((..))))))', '..((((((..))))))'], 0, 'left', [0, 1, 2],
     [{0: 15, 1: 14, 2: 13, 5: 12, 6: 11, 7: 10, 10: 7, 11: 6, 12: 5, 13: 2,
       14: 1, 15: 0},
      {2: 15, 3: 14, 4: 13, 5: 12, 6: 11, 7: 10, 10: 7, 11: 6, 12: 5, 13: 4,
       14: 3, 15: 2}], 2,
     ['--((((((..))))))', '..((((((..))))))']),

    # 3 nucleotides shift with bulge
    (['(((-.--(((..))))))', '...(((.(((..))))))'], 0, 'left', [0, 1, 2],
     [{0: 17, 1: 16, 2: 15, 7: 14, 8: 13, 9: 12, 12: 9, 13: 8, 14: 7, 15: 2,
       16: 1, 17: 0},
      {3: 17, 4: 16, 5: 15, 7: 14, 8: 13, 9: 12, 12: 9, 13: 8, 14: 7, 15: 5,
       16: 6, 17: 3}], 3,
     ['---(((.(((..))))))', '...(((.(((..))))))']),

    # right
    (['(((-(((..))))))', '((((((...))))))'], 3, 'right', [3, 4, 5],
     [{0: 14, 1: 13, 2: 12, 4: 11, 5: 10, 6: 9, 9: 6, 10: 5, 11: 4, 12: 2,
       13: 1, 14: 0},
      {0: 14, 1: 13, 2: 12, 3: 11, 4: 10, 5: 9, 9: 5, 10: 4, 11: 3, 12: 2,
       13: 1, 14: 0}], 1,
     ['((((((-..))))))', '((((((...))))))']),

    # left - counter place (right)
    (['((((((..)))-)))', '((((((...))))))'], 3, 'right', [3, 4, 5],
     [{0: 14, 1: 13, 2: 12, 3: 10, 4: 9, 5: 8, 8: 5, 9: 4, 10: 3, 12: 2,
       13: 1, 14: 0},
      {0: 14, 1: 13, 2: 12, 3: 11, 4: 10, 5: 9, 9: 5, 10: 4, 11: 3, 12: 2,
       13: 1, 14: 0}], 1,
     ['((((((..-))))))', '((((((...))))))']),

    # 2 nucleotides left - counter place (right)
    (['((((((..)))--)))', '((((((....))))))'], 3, 'right', [3, 4, 5],
     [{0: 15, 1: 14, 2: 13, 3: 10, 4: 9, 5: 8, 8: 5, 9: 4, 10: 3, 13: 2,
       14: 1, 15: 0},
      {0: 15, 1: 14, 2: 13, 3: 12, 4: 11, 5: 10, 10: 5, 11: 4, 12: 3, 13: 2,
       14: 1, 15: 0}], 2,
     ['((((((..--))))))', '((((((....))))))']),

    # right - counter place (left)
    (['((((((..)))-)))', '((((((..)))))).'], 0, 'left', [0, 1, 2],
     [{0: 14, 1: 13, 2: 12, 3: 10, 4: 9, 5: 8, 8: 5, 9: 4, 10: 3, 12: 2,
       13: 1, 14: 0},
      {0: 13, 1: 12, 2: 11, 3: 10, 4: 9, 5: 8, 8: 5, 9: 4, 10: 3, 11: 2,
       12: 1, 13: 0}], 1,
     ['((((((..))))))-', '((((((..)))))).']),

    # 2 nucleotides right - counter place (left)
    (['((((((..)))--)))', '((((((..))))))..'], 0, 'left', [0, 1, 2],
     [{0: 15, 1: 14, 2: 13, 3: 10, 4: 9, 5: 8, 8: 5, 9: 4, 10: 3, 13: 2,
       14: 1, 15: 0},
      {0: 13, 1: 12, 2: 11, 3: 10, 4: 9, 5: 8, 8: 5, 9: 4, 10: 3, 11: 2,
       12: 1, 13: 0}], 2,
     ['((((((..))))))--', '((((((..))))))..']), # 11 13

    # 3 structures
    (['(((-(((..))))))', '(((-(((..))))))', '.((((((..))))))'],
     0, 'left', [0, 1, 2],
     [{0: 14, 1: 13, 2: 12, 4: 11, 5: 10, 6: 9, 9: 6, 10: 5, 11: 4, 12: 2,
       13: 1, 14: 0},
      {0: 14, 1: 13, 2: 12, 4: 11, 5: 10, 6: 9, 9: 6, 10: 5, 11: 4, 12: 2,
       13: 1, 14: 0},
      {1: 14, 2: 13, 3: 12, 4: 11, 5: 10, 6: 9, 9: 6, 10: 5, 11: 4, 12: 3,
       13: 2, 14: 1}], 1,
     ['-((((((..))))))', '-((((((..))))))', '.((((((..))))))']),

    # 3 structures, shifted differently
    (['((((((..)))-)))-', '((((((..)))--)))', '((((((..))))))..'],
     0, 'left', [0, 1, 2],
     [{0: 14, 1: 13, 2: 12, 3: 10, 4: 9, 5: 8, 8: 5, 9: 4, 10: 3, 12: 2,
       13: 1, 14: 0},
      {0: 15, 1: 14, 2: 13, 3: 10, 4: 9, 5: 8, 8: 5, 9: 4, 10: 3, 13: 2,
       14: 1, 15: 0},
      {0: 13, 1: 12, 2: 11, 3: 10, 4: 9, 5: 8, 8: 5, 9: 4, 10: 3, 11: 2,
       12: 1, 13: 0}], 2,
     ['((((((..)))--)))--', '((((((..)))--)))--', '((((((..)))--)))..']),
])
def test_fix_one_place(
        dotbracket_structures, position, left_or_right,
        unusual_positions_places, representations, how_many_nt,
        adjusted):
    result = fix_one_place(
        dotbracket_structures, position, left_or_right,
        unusual_positions_places, representations, how_many_nt)
    assert result == adjusted


@pytest.mark.parametrize("dotbracket_structures,offset,adjusted", [
    (['(((-(((..))))))', '.((((((..))))))'], 0,
     ['-((((((..))))))', '.((((((..))))))']),

    (['(((--.-(((..))))))', '...(((.(((..))))))'], 0,
     ['---(((.(((..))))))', '...(((.(((..))))))']),

    (['...(((.(((..))))))', '(((--.-(((..))))))'], 0,
     ['...(((.(((..))))))', '---(((.(((..))))))']),

    #with offset
    (['...(((.(((..))))))', '(((--.-(((..))))))'], 10,
     ['...(((.(((..))))))', '(((--.-(((..))))))']),

    (['(((-(((..))))))', '((((((...))))))'], 0,
     ['((((((-..))))))', '((((((...))))))']),

    (['((((((..)))--.-)))', '((((((..))).)))...'], 0,
     ['((((((..))).)))---', '((((((..))).)))...']),

    (['((((((..)))-.--)))', '((((((..-..))).)))'], 0,
     ['((((((..---))).)))', '((((((..-..))).)))']),

    (['-.((((........((((((((((.....(((.....)))..--)))))))))).........-)))).',
      '-.((((........-((((((((((.....(((...-)))....))))))))))..........)))).'],
     0,
     ['-.((((........-((((((((((.....-(((.....)))..--)))))))))).........-)))).',
      '-.((((........-((((((((((-.....(((-...-)))....))))))))))..........)))).']
    ),

    # (['-.((((........((((((((((.....(((.....)))..--)))))))))).........)))).',
    #   '-.((((........-((((((((((.....(((...)))....))))))))))..........)))).'],
    #  0,
    #  ['-.((((........-((((((((((.....-(((.....)))-..--))))))))))-.........)))).',
    #   '-.((((........-((((((((((-.....(((-...-)))....-))))))))))..........)))).']
    # ),
    #
    # (['-.((((........((((((((((.....(((.....)))..--)))))))))).........)))).',
    #   '-.((((........-((((((((((.....(((...)))....))))))))))..........)))).',
    #   '..((((.........((((((((((....(((.....))).---)))))))))).........))))-',
    #   '-.((((.........((((((((((.....(((...)))..)--)))))))))..........)))).',
    #   '-.((((.........((((((((((.....(((...))))----)))))))))..........)))).'],
    #  0,
    #
    #  ['-.((((........-((((((((((.....-(((.....)))-..--))))))))))-.........)))).',
    #   '-.((((........-((((((((((.-....(((-...-)))....-))))))))))..........)))).',
    #   '..((((.........((((((((((.-...-(((.....)))-.---))))))))))-.........))))-',
    #   '-.((((.........((((((((((.-....(((-...-)))..)--))))))))).-.........)))).',
    #   '-.((((.........((((((((((.-....(((-...-))))----))))))))).-.........)))).']
    # )
])
def test_move_1_2nt_gaps(dotbracket_structures, offset, adjusted):
    result = move_1_2nt_gaps(dotbracket_structures, offset)
    assert result == adjusted


@pytest.mark.parametrize("dotbracket_structures,should_be", [
    (['(((-(((..))))))', '(((-(((..))))))'],
     ['((((((..))))))', '((((((..))))))']),

    (['(((-(-((..)))-)))', '(((-(-((..)))-)))'],
     ['((((((..))))))', '((((((..))))))']),

    (['(((-(((..-))))))', '(((-(((-..))))))'],
     ['((((((..-))))))', '((((((-..))))))']),

    (['((..-----..))', '((..-----..))', '((..-----..))'],
     ['((....))', '((....))', '((....))'])
])
def test_remove_gaps_same_place(dotbracket_structures, should_be):
    result = remove_gaps_same_place(dotbracket_structures)
    assert result == should_be


@pytest.mark.parametrize("dotbracket_structures,structural_blocks,should_be", [
    (['((.-...----))', '((-----....))', '((....-----))'],
     [[(0, 1), (11, 12)], [(0, 1), (11, 12)], [(0, 1), (11, 12)]],
     ['((....))', '((....))', '((....))']),

])
def test_move_gaps_to_the_loop_centre(
        dotbracket_structures, structural_blocks, should_be):
    result = move_gaps_to_the_loop_centre(
        dotbracket_structures, structural_blocks)
    assert result == should_be
